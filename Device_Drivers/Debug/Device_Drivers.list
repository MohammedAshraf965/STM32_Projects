
Device_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003bc  080003c4  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  4 .ARM          00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003bc  080003c4  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003c4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000080e  00000000  00000000  00010437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000207  00000000  00000000  00010c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005d  00000000  00000000  00010ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001dbb  00000000  00000000  00010f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c7d  00000000  00000000  00012cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007c51  00000000  00000000  00013975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000150  00000000  00000000  0001b5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0001b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003a4 	.word	0x080003a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003a4 	.word	0x080003a4

080001d4 <NVIC_EnableIRQ>:
 * @detail 		Enables a device specific interrupt in the NVIC
 * @param IRQn:	Device specific interrupt number
 * @note		IRQn must not be negative
 **/
void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)IRQn >= 0)
	{
		NVIC->ISER[(IRQn/32)] |= (1 << (IRQn%32));
 80001de:	4a11      	ldr	r2, [pc, #68]	; (8000224 <NVIC_EnableIRQ+0x50>)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	da00      	bge.n	80001ea <NVIC_EnableIRQ+0x16>
 80001e8:	331f      	adds	r3, #31
 80001ea:	115b      	asrs	r3, r3, #5
 80001ec:	b258      	sxtb	r0, r3
 80001ee:	4603      	mov	r3, r0
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	4259      	negs	r1, r3
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	f001 011f 	and.w	r1, r1, #31
 8000202:	bf58      	it	pl
 8000204:	424b      	negpl	r3, r1
 8000206:	b25b      	sxtb	r3, r3
 8000208:	4619      	mov	r1, r3
 800020a:	2301      	movs	r3, #1
 800020c:	408b      	lsls	r3, r1
 800020e:	4905      	ldr	r1, [pc, #20]	; (8000224 <NVIC_EnableIRQ+0x50>)
 8000210:	4313      	orrs	r3, r2
 8000212:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		//NVIC->ISER[(uint32_t)IRQn >> 5] = (1UL << (((uint32_t)IRQn) & 0x1F));
	}
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <NVIC_DisableIRQ>:
 * @detail 		Disables a device specific interrupt in the NVIC
 * @param IRQn:	Device specific interrupt number
 * @note		IRQn must not be negative
 **/
void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000228:	b490      	push	{r4, r7}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)IRQn >= 0)
	{
		NVIC->ICER[(IRQn/32)] |= (1 << (IRQn%32));
 8000232:	4a12      	ldr	r2, [pc, #72]	; (800027c <NVIC_DisableIRQ+0x54>)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	da00      	bge.n	800023e <NVIC_DisableIRQ+0x16>
 800023c:	331f      	adds	r3, #31
 800023e:	115b      	asrs	r3, r3, #5
 8000240:	b258      	sxtb	r0, r3
 8000242:	4603      	mov	r3, r0
 8000244:	3320      	adds	r3, #32
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	4259      	negs	r1, r3
 8000250:	f003 031f 	and.w	r3, r3, #31
 8000254:	f001 011f 	and.w	r1, r1, #31
 8000258:	bf58      	it	pl
 800025a:	424b      	negpl	r3, r1
 800025c:	b25b      	sxtb	r3, r3
 800025e:	4619      	mov	r1, r3
 8000260:	2301      	movs	r3, #1
 8000262:	408b      	lsls	r3, r1
 8000264:	461c      	mov	r4, r3
 8000266:	4905      	ldr	r1, [pc, #20]	; (800027c <NVIC_DisableIRQ+0x54>)
 8000268:	4603      	mov	r3, r0
 800026a:	4322      	orrs	r2, r4
 800026c:	3320      	adds	r3, #32
 800026e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//NVIC->ISER[(uint32_t)IRQn >> 5] = (1UL << (((uint32_t)IRQn) & 0x1F));
	}
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bc90      	pop	{r4, r7}
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <NVIC_SetPendingIRQ>:
 * @detail 		Sets the pending bit of a device specific interrupt in the NVIC pending register
 * @param IRQn:	Device specific interrupt number
 * @note		IRQn must not be negative
 **/
void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000280:	b490      	push	{r4, r7}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)IRQn >= 0)
	{
		NVIC->ISPR[(IRQn/32)] |= (1 << (IRQn%32));
 800028a:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <NVIC_SetPendingIRQ+0x54>)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	da00      	bge.n	8000296 <NVIC_SetPendingIRQ+0x16>
 8000294:	331f      	adds	r3, #31
 8000296:	115b      	asrs	r3, r3, #5
 8000298:	b258      	sxtb	r0, r3
 800029a:	4603      	mov	r3, r0
 800029c:	3340      	adds	r3, #64	; 0x40
 800029e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	4259      	negs	r1, r3
 80002a8:	f003 031f 	and.w	r3, r3, #31
 80002ac:	f001 011f 	and.w	r1, r1, #31
 80002b0:	bf58      	it	pl
 80002b2:	424b      	negpl	r3, r1
 80002b4:	b25b      	sxtb	r3, r3
 80002b6:	4619      	mov	r1, r3
 80002b8:	2301      	movs	r3, #1
 80002ba:	408b      	lsls	r3, r1
 80002bc:	461c      	mov	r4, r3
 80002be:	4905      	ldr	r1, [pc, #20]	; (80002d4 <NVIC_SetPendingIRQ+0x54>)
 80002c0:	4603      	mov	r3, r0
 80002c2:	4322      	orrs	r2, r4
 80002c4:	3340      	adds	r3, #64	; 0x40
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//NVIC->ISER[(uint32_t)IRQn >> 5] = (1UL << (((uint32_t)IRQn) & 0x1F));
	}
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc90      	pop	{r4, r7}
 80002d2:	4770      	bx	lr
 80002d4:	e000e100 	.word	0xe000e100

080002d8 <main>:
#include "SCB.h"

static volatile uint32_t USART2_IRQHandlerFlag = 0;

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	//SCB_SetPriorityGrouping(SCB_PRIORITYGROUP_2);

	NVIC_EnableIRQ(USART2_IRQn);
 80002dc:	2026      	movs	r0, #38	; 0x26
 80002de:	f7ff ff79 	bl	80001d4 <NVIC_EnableIRQ>
	NVIC_SetPendingIRQ(USART2_IRQn);
 80002e2:	2026      	movs	r0, #38	; 0x26
 80002e4:	f7ff ffcc 	bl	8000280 <NVIC_SetPendingIRQ>

	NVIC_DisableIRQ(USART2_IRQn);
 80002e8:	2026      	movs	r0, #38	; 0x26
 80002ea:	f7ff ff9d 	bl	8000228 <NVIC_DisableIRQ>

    /* Loop forever */
	for(;;);
 80002ee:	e7fe      	b.n	80002ee <main+0x16>

080002f0 <USART2_IRQHandler>:
}

void USART2_IRQHandler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	USART2_IRQHandlerFlag = 1;
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <USART2_IRQHandler+0x14>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	2000001c 	.word	0x2000001c

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	; (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	; (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 f811 	bl	800035c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ffcd 	bl	80002d8 <main>

0800033e <LoopForever>:

LoopForever:
  b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800034c:	080003c4 	.word	0x080003c4
  ldr r2, =_sbss
 8000350:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000354:	20000020 	.word	0x20000020

08000358 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC_IRQHandler>
	...

0800035c <__libc_init_array>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	4d0d      	ldr	r5, [pc, #52]	; (8000394 <__libc_init_array+0x38>)
 8000360:	4c0d      	ldr	r4, [pc, #52]	; (8000398 <__libc_init_array+0x3c>)
 8000362:	1b64      	subs	r4, r4, r5
 8000364:	10a4      	asrs	r4, r4, #2
 8000366:	2600      	movs	r6, #0
 8000368:	42a6      	cmp	r6, r4
 800036a:	d109      	bne.n	8000380 <__libc_init_array+0x24>
 800036c:	4d0b      	ldr	r5, [pc, #44]	; (800039c <__libc_init_array+0x40>)
 800036e:	4c0c      	ldr	r4, [pc, #48]	; (80003a0 <__libc_init_array+0x44>)
 8000370:	f000 f818 	bl	80003a4 <_init>
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	10a4      	asrs	r4, r4, #2
 8000378:	2600      	movs	r6, #0
 800037a:	42a6      	cmp	r6, r4
 800037c:	d105      	bne.n	800038a <__libc_init_array+0x2e>
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	f855 3b04 	ldr.w	r3, [r5], #4
 8000384:	4798      	blx	r3
 8000386:	3601      	adds	r6, #1
 8000388:	e7ee      	b.n	8000368 <__libc_init_array+0xc>
 800038a:	f855 3b04 	ldr.w	r3, [r5], #4
 800038e:	4798      	blx	r3
 8000390:	3601      	adds	r6, #1
 8000392:	e7f2      	b.n	800037a <__libc_init_array+0x1e>
 8000394:	080003bc 	.word	0x080003bc
 8000398:	080003bc 	.word	0x080003bc
 800039c:	080003bc 	.word	0x080003bc
 80003a0:	080003c0 	.word	0x080003c0

080003a4 <_init>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr

080003b0 <_fini>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr
